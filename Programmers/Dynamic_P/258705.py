# 중간 삼각형을 한 칸 씩 세면서 가능한 경우의 수를 누적 하면서 계산하면 쉽게 풀 수 있습니다.

def solution(n, tops):
    # 삼각형 1개의 경우(n = 1)
    #   위에 있는 경우 -> 4가지
    #   위에 없는 경우 -> 3가지

    # 삼각형 2개의 경우 (n = 2)
    #   위에 있는 경우 -> 1개일때와 같지만, 마름모 타일이 겹치는 경우가 있을 수 있다.
    #   따라서 -(겹치는 경우의 수)를 해준다.\/ 방향으로 마름모 타일을 붙이면 끝 부분이 겹친다.
    #   위에 없는 경우 -> 기존과 같은 방식이다.
    dp = [0] * n
    dp[0] = 3 + (tops[0] == 1)

    if n > 1:
        dp[1] = dp[0] * (3 + (tops[1] == 1)) - 1

    for i in range(2, n):
        dp[i] = dp[i-1] * (3 + (tops[i] == 1)) - dp[i-2] # 겹치는 경우를 빼기 위함
        dp[i] %= 10007

    return dp[-1]


# 이 문제는 위에 삼각형이 있냐 없냐 빼고는 전형적인 dp 타일같은 문제이다.
# 그러니 tops에서 1인지 아닌지에 따라 곱셈을 다르게 진행하면 쉽게 풀리는 문제다.