from collections import defaultdict

def getCnt(num):
    global bitmask
    binNum = bin(num)[2:]
    cnt = 0
    for i in range(len(binNum)):
        if binNum[i] == '0':
            continue
        if i == len(binNum) - 1:
            cnt += 1
            continue
        cnt += bitmask[len(binNum) - i - 1]
        cnt += int(binNum[i+1:], 2) + 1
    return cnt


a, b = map(int, input().split())
global bitmask
bitmask = defaultdict(int)
bitmask[1] = 1

idx = 2
while 2 ** idx <= b:
    bitmask[idx] = bitmask[idx - 1] * 2 + 2 ** (idx - 1)
    idx += 1

print(getCnt(b) - getCnt(a-1))


# 000000000000001
# 000000000000010 -> 2
# 000000000000011
# 000000000000100
# 000000000000101
# 000000000000110
# 000000000000111
# 000000000001000
# 000000000001001
# 000000000001010 -> 10
# 000000000001011
# 000000000001100 -> 12 (22) 12 + 5, 4 + 1
# 000000000001101 -> 13 (25) 12 + 6, 4 + 2, 1
# 000000000001110 -> 14 (28) 12 + 7, 4 + 3, 1 + 1
# 000000000001111
#
# 000000000000 00
# 000000000000 01
# 000000000000 10
# 000000000000 11
#
# 1비트 -> 1개
# 2비트 -> 1비트에서의 1의개수 * 2 + 2^1 = 4
# 3비트 -> 2비트에서의 1의개수 * 2 + 2^2 = 12
# 4비트 -> 3비트에서의 1의개수 * 2 + 2^3 = 32
# ...
# n비트 -> n-1비트에서의 1의개수 * 2 + 2^(n-1)
#
#
# 2 ~ 12 -> 12의개수 - 1의개수

# 1비트 ~ b보다 작은 2의 제곱수까지 비트수를 미리 구한뒤에
# b까지 1비트 총 개수 - a-1까지 1비트 총 개수를 구한다.
# n에 대한 1비트 총 개수는 n을 2진수로 변경한 뒤에 왼쪽으로부터 i인덱스가 1인경우, 나머지 비트에 대한 총 개수 + i인덱스가 1인 개수를 더해나가는 누적방식으로 총 개수를 구한다.